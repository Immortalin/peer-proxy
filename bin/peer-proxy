#!/usr/bin/env node

//
// Please install node-httpp binary in your system exec dir, like /usr/bin/ or /usr/local/bin/
//

var util  = require('util'),
    argv = require('optimist').argv,
    Proxy = require('../index');

var help = [
    "usage: peer-proxy [options] ",
    "",
    "Starts a peer-proxy server using the specified command-line options",
    "",
    "options:",
    "  -t, --target   http://xxx,https://xxx  URL of the server, the multiple URLs separate by comma",
    "  -s  --secmode  ssl or acl              Secure mode: ssl or host-based ACL",
    "  -a  --authmode srv or both             SSL auth mode: srv or both",
    "  -k, --key      User key                Key for the registered user",
    "  -l, --level    srv or both             proxy level: srv or both server and web site",
    "  -b  --basicauth user:pass              Http basic-auth as username:password",
    "  -u, --user     USER                    User to drop privileges once server socket is bound",
    "  -h, --help                             You're staring at it"
].join('\n');

if (argv.h || argv.help || Object.keys(argv).length === 2) {
  return util.puts(help);
}

var target    = argv.t || argv.target,
    secmode   = argv.s || argv.secmode,
    authmode  = argv.a || argv.authmode,
    user      = argv.u || argv.user,
    basicauth = argv.b || argv.basicauth,
    level     = argv.l || argv.level,
    usrkey    = argv.k || argv.key;


// 
// Check target 
//
var websites = [];

if (target) {
    target = target.split(',');
    
    target.forEach(function(t){
        if (t.match(/https?/i)) {
            websites.push(t);
        } else {
            websites.push('http://'+t);
        }
    });
    
    if (!websites.length) {
        return util.puts(help);    
    }
} else {
    return util.puts(help);
}

if (!basicauth) {
	console.log('Warning: Please set http auth with -b username:password');
}

//
// Create the server with the specified options
//

var server = new Proxy(websites, function(err, proxyURL){
	console.log('Website                            Proxy URL(please open it on browser)');
	for (var k in proxyURL) {
		console.log(k+'        '+proxyURL[k]);
	}
}, 
{
	secmode: secmode, usrkey: usrkey, 
	sslmode: authmode, level: level,
	   auth: basicauth
});

//
// Drop privileges if requested
//
if (typeof user === 'string') {
    process.setuid(user);
}

